// src/components/AddEmployees/index.tsx - CODIGO CON LA SOLUCION aplicando la copia profunda
import React, { useState, useEffect, useRef, useMemo } from 'react';
import { Calendar } from 'lucide-react';
import DatePickerModal from '../DatePickerModal';
import { useShiftContext } from '../../context/ShiftContext';
import { useEmployeeLists } from '../../context/EmployeeListsContext'; // Correcto
import { useRules } from '../../context/RulesContext';
import { useSelectedEmployees } from '../../context/SelectedEmployeesContext';
import BlockShiftModal from '../BlockShiftModal';
import AssignPermanentShiftsModal from '../AssignPermanentShiftsModal';
import PreferenceManager from '../PreferenceManager';
import LeaveModal from '../LeaveModal';
import { ChevronDown, AlertCircle, Loader2, Edit2 } from 'lucide-react';

// Interfaz Employee (Debe coincidir con la del contexto)
interface Employee {
  id: string;
  name: string;
  email: string;
  phone: string;
  hireDate: string;
  fixedShifts: { [day: string]: string[] };
  maxConsecutiveShifts: number;
  shiftPreferences: (number | null)[];
  leave: { id: string; startDate: string; endDate: string; leaveType: string; hoursPerDay: number }[];
  blockedShifts: { [shiftId: string]: string[] };
  notes: {
    confidential: string;
    aiRules: string;
  };
}

// Mantener el componente EditableField sin cambios, ya está funcional.
interface EditableFieldProps {
  value: string;
  onChange: (value: string) => void;
  className?: string;
}

const EditableField: React.FC<EditableFieldProps> = ({ value, onChange, className = '' }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [tempValue, setTempValue] = useState(value);
  const [showConfirm, setShowConfirm] = useState(false);
  const [isClosing, setIsClosing] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (!isEditing) {
      setTempValue(value);
    }
  }, [value, isEditing]);

  const handleContainerClick = () => {
    if (isEditing) return;
    setShowConfirm(true);
    setIsClosing(false);
  };

  const handleConfirm = () => {
    setIsEditing(true);
    setIsClosing(true);
    setTimeout(() => {
      setShowConfirm(false);
      setIsClosing(false);
    }, 150);
    setTimeout(() => inputRef.current?.focus(), 0);
  };

  const handleCancel = () => {
    setIsClosing(true);
    setTimeout(() => {
      setShowConfirm(false);
      setIsClosing(false);
    }, 150);
    setTempValue(value);
  };

  const handleBlur = () => {
    setIsEditing(false);
    if (tempValue !== value) {
      onChange(tempValue);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      setIsEditing(false);
      if (tempValue !== value) {
        onChange(tempValue);
      }
    } else if (e.key === 'Escape') {
      setIsEditing(false);
      setTempValue(value);
    }
  };

  return (
    <div className="relative group cursor-pointer flex-1" onClick={handleContainerClick}>
      {isEditing ? (
        <input
          ref={inputRef}
          type="text"
          value={tempValue}
          onChange={(e) => setTempValue(e.target.value)}
          onBlur={handleBlur}
          onKeyDown={handleKeyDown}
          onClick={(e) => e.stopPropagation()}
          className={`w-full border border-gray-300 rounded px-3 py-1 min-w-0 ${className}`}
        />
      ) : (
        <div className="flex items-center hover:bg-gray-50 rounded px-2 py-1 w-full border border-gray-200">
          <span className="flex-1">{value}</span>
        </div>
      )}
      {showConfirm && (
        <div className="absolute z-10 top-0 left-0 right-0 bg-white border border-gray-200 rounded-lg shadow-lg p-3">
          <div className={`transition-opacity duration-150 ${isClosing ? 'opacity-0' : 'opacity-100'}`}>
            <p className="text-sm mb-3">¿Desea editar este campo?</p>
            <div className="flex justify-end gap-2">
              <button
                onClick={(e) => { e.stopPropagation(); handleCancel(); }}
                className="px-2 py-1 text-sm text-gray-600 hover:bg-gray-100 rounded"
              >
                Cancelar
              </button>
              <button
                onClick={(e) => { e.stopPropagation(); handleConfirm(); }}
                className="px-2 py-1 text-sm bg-green-500 text-white hover:bg-green-600 rounded"
              >
                Aceptar
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};


interface BlockShiftModalState {
  isOpen: boolean;
  shift: {
    id: string;
    startTime: string;
    endTime: string;
  } | null;
  employeeIndex: number | null;
}

interface NewEmployeeForm {
  id: string;
  name: string;
  hireDate: string;
  email: string;
  phone: string;
}

const AddEmployees: React.FC = () => {
  const { shifts } = useShiftContext(); 
  const { getCurrentList, updateList } = useEmployeeLists();
  const { rules } = useRules();

  // Variables normales para el componente
  const [employeeStateLoaded, setEmployeeStateLoaded] = useState(false);

  // Eliminar llamada a getCurrentList de aquí - es parte del problema
  // Definimos un estado local para rastrear el empleado list cargado
  const [employeeStateLoaded, setEmployeeStateLoaded] = useState(false);
  
  // Estado local para hacer caching de la lista actual para evitar re-renders continuos
  const [localEmployeeList, setLocalEmployeeList] = useState<any>(null);
  const [localEmployees, setLocalEmployees] = useState<any[]>([]);
  
  const [formError, setFormError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  // Usar el contexto compartido para la selección de empleados
  const { selectedEmployeeIds, setSelectedEmployeeIds } = useSelectedEmployees();
  
  // Importar funciones del contexto de selección
  const { toggleEmployeeSelection, toggleAllEmployees } = useSelectedEmployees();
  const [isDatePickerOpen, setIsDatePickerOpen] = useState(false);
  const [leaveModalState, setLeaveModalState] = useState<{ isOpen: boolean; employeeIndex: number | null }>({
    isOpen: false,
    employeeIndex: null
  });
  const [assignShiftsModalState, setAssignShiftsModalState] = useState<{ isOpen: boolean; employeeIndex: number | null }>({
    isOpen: false,
    employeeIndex: null
  });
  const [newEmployee, setNewEmployee] = useState<NewEmployeeForm>({
    id: '',
    name: '',
    hireDate: '',
    email: '',
    phone: ''
  });

  const [modalState, setModalState] = useState<BlockShiftModalState>({
    isOpen: false,
    shift: null,
    employeeIndex: null
  });

  // Usamos useEffect una sola vez para cargar los datos iniciales
  useEffect(() => {
    if (!employeeStateLoaded) {
      const list = getCurrentList();
      if (list) {
        setLocalEmployeeList(list);
        setLocalEmployees(list.employees || []);
        setIsLoading(false);
        setEmployeeStateLoaded(true);
      }
    }
  }, [getCurrentList, employeeStateLoaded]);
  
  // Acceso directo para el código que necesita estas variables
  const currentEmployeeList = localEmployeeList;
  const employees = localEmployees;


  const formatDateInput = (value: string) => {
    const numbers = value.replace(/\D/g, '');
    if (!numbers) return '';
    if (numbers.length <= 2) return numbers;
    if (numbers.length <= 4) return `${numbers.slice(0, 2)}/${numbers.slice(2)}`;
    return `${numbers.slice(0, 2)}/${numbers.slice(2, 4)}/${numbers.slice(4, 8)}`;
  };

  const handleInputChange = (field: keyof NewEmployeeForm, value: string) => {
    setNewEmployee(prev => ({ ...prev, [field]: value }));
    setFormError(null);
  };

  const handleAddEmployee = () => {
    if (!newEmployee.id || !newEmployee.name || !newEmployee.hireDate) {
      setFormError('Please fill in all required fields');
      return;
    }

    // Use current employees from context for validation
    if (employees.some(emp => emp.id === newEmployee.id)) {
      setFormError('An employee with this ID already exists');
      return;
    }
    
    // Seleccionar automáticamente el nuevo empleado
    setSelectedEmployeeIds(prev => [...prev, newEmployee.id]);

    // Create the new employee object with explicit defaults for optional fields
    const employeeToAdd: Employee = {
      id: newEmployee.id,
      name: newEmployee.name,
      email: newEmployee.email || '', // Ensure empty string if null/undefined
      phone: newEmployee.phone || '', // Ensure empty string if null/undefined
      hireDate: newEmployee.hireDate,
      // Default values for the new employee, consistent with Employee interface
      fixedShifts: {},
      maxConsecutiveShifts: parseInt(rules.maxConsecutiveShifts) || 5, // Use global rules
      shiftPreferences: Array(shifts.length).fill(null), // Initialize with correct size
      leave: [],
      blockedShifts: {},
      notes: {
        confidential: '',
        aiRules: ''
      }
    };

    if (currentEmployeeList) {
      // Crea un nuevo array con el empleado añadido
      const employeesWithNew = [...employees, employeeToAdd];

      // Realizar una copia profunda del array de empleados
      const updatedEmployeesDeepCopy = JSON.parse(JSON.stringify(employeesWithNew));

      // Actualizar también el estado local para evitar problemas de sincronización
      setLocalEmployees(updatedEmployeesDeepCopy);

      // Debug - puede eliminarse en producción
      console.log("Antes de actualizar (AddEmployees):", employees.length, "empleados");
      console.log("Nuevo empleado a añadir:", employeeToAdd);
      console.log("Array de empleados con copia profunda:", updatedEmployeesDeepCopy.length, "empleados");

      // Actualizar el contexto con el array copiado profundamente
      updateList(currentEmployeeList.id, { employees: updatedEmployeesDeepCopy });

      // Debug - puede eliminarse en producción
      console.log("Llamada a updateList con:", updatedEmployeesDeepCopy.length, "empleados");

      // Limpiar el formulario
      setNewEmployee({ id: '', name: '', hireDate: '', email: '', phone: '' });
      setFormError(null);
    }
  };

  // Keep the updateEmployeeProperty function - it uses shallow copies which is standard for object updates
  const updateEmployeeProperty = (employeeIndex: number, property: keyof Employee, value: any) => {
    if (currentEmployeeList) {
      const updatedEmployees = employees.map((emp, idx) => 
